#coding=utf-8
#-*- coding: UTF-8 -*-
import sys

reload(sys)
sys.setdefaultencoding('utf-8')

from django.contrib.auth.models import User
from django.shortcuts import render_to_response
from django.views.decorators.csrf import csrf_exempt
from rest_framework import permissions

from rest_framework import renderers
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework.reverse import reverse
from rest_framework import viewsets
from rest_framework.decorators import link

from ygg_app.permissions import IsOwnerOrReadOnly
from ygg_app.models import REST, site_hupu_today, site_hupu_topic, site_hupu_data, site_sinaNBA_video
from ygg_app.serializers import RESTSerializer, UserSerializer, SiteHupuTodaySerializer, SiteHupuTopicSerializer

# import lxml.html as HTML
# import urllib2

def home(request):

    return render_to_response('v2/index.html', {})

def hupu(request):

    hupuToday = site_hupu_today.objects.all()
    hupuTopic = site_hupu_topic.objects.all()
    hupuData = site_hupu_data.objects.all()
    sinaNBAVideo = site_sinaNBA_video.objects.all()


    param = {'hupuToday': hupuToday, 'hupuTopic': hupuTopic, 'hupuData': hupuData, 'sinaNBAVideo': sinaNBAVideo}

    return render_to_response('v2/nba.html', param)

@api_view(('GET',))
def api_root(request, format=None):
    return Response({
        'users': reverse('user-list', request=request, format=format),
        'rests': reverse('rest-list', request=request, format=format)
    })

class HupuTodayViewSet(viewsets.ReadOnlyModelViewSet):

    queryset = site_hupu_today.objects.all()
    serializer_class = SiteHupuTodaySerializer
    permission_classes = (permissions.AllowAny,)
    paginate_by = 30

class HupuTopicViewSet(viewsets.ReadOnlyModelViewSet):

    queryset = site_hupu_topic.objects.all()
    serializer_class = SiteHupuTopicSerializer
    permission_classes = (permissions.AllowAny,)
    paginate_by = 16

class RESTViewSet(viewsets.ModelViewSet):
    """
    This viewset automatically provides `list`, `create`, `retrieve`,
    `update` and `destroy` actions.

    Additionally we also provide an extra `highlight` action.
    """
    queryset = REST.objects.all()
    serializer_class = RESTSerializer
    permission_classes = (permissions.IsAuthenticatedOrReadOnly,
                          IsOwnerOrReadOnly,)

    @link(renderer_classes=[renderers.StaticHTMLRenderer])
    def highlight(self, request, *args, **kwargs):
        rest = self.get_object()
        return Response(rest.highlighted)

    def pre_save(self, obj):
        obj.owner = self.request.user

# @api_view(['GET'])
# @permission_classes((permissions.AllowAny,))
# def yyets_search(request, format=None):
#
#     p = request.QUERY_PARAMS.get('p', None)
#
#     p = p.encode('utf-8')
#
#     p = urllib2.quote(p)
#
#     response = urllib2.urlopen('http://www.yayaxz.com/search/' + str(p))
#     resource = response.read()
#
#     htree = HTML.parse(resource)
#
#     response.close()
#
#     items = htree.xpath('//div[@class="resource-list-box"]/dl[@class="resource-list"]')
#     # items = re.findall('<div>(.*?)</div>', resource.decode("utf-8"),re.S)
#
#     return Response(items)


class UserViewSet(viewsets.ModelViewSet):

    queryset = User.objects.all()
    serializer_class = UserSerializer